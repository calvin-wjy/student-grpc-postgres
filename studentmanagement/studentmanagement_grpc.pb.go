// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_studentmanagement_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentManagementClient is the client API for StudentManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentManagementClient interface {
	CreateNewStudent(ctx context.Context, in *NewStudent, opts ...grpc.CallOption) (*Student, error)
	GetStudents(ctx context.Context, in *GetStudentsParams, opts ...grpc.CallOption) (*StudentsList, error)
}

type studentManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentManagementClient(cc grpc.ClientConnInterface) StudentManagementClient {
	return &studentManagementClient{cc}
}

func (c *studentManagementClient) CreateNewStudent(ctx context.Context, in *NewStudent, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/studentmanagement.StudentManagement/CreateNewStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentManagementClient) GetStudents(ctx context.Context, in *GetStudentsParams, opts ...grpc.CallOption) (*StudentsList, error) {
	out := new(StudentsList)
	err := c.cc.Invoke(ctx, "/studentmanagement.StudentManagement/GetStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentManagementServer is the server API for StudentManagement service.
// All implementations must embed UnimplementedStudentManagementServer
// for forward compatibility
type StudentManagementServer interface {
	CreateNewStudent(context.Context, *NewStudent) (*Student, error)
	GetStudents(context.Context, *GetStudentsParams) (*StudentsList, error)
	mustEmbedUnimplementedStudentManagementServer()
}

// UnimplementedStudentManagementServer must be embedded to have forward compatible implementations.
type UnimplementedStudentManagementServer struct {
}

func (UnimplementedStudentManagementServer) CreateNewStudent(context.Context, *NewStudent) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewStudent not implemented")
}
func (UnimplementedStudentManagementServer) GetStudents(context.Context, *GetStudentsParams) (*StudentsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedStudentManagementServer) mustEmbedUnimplementedStudentManagementServer() {}

// UnsafeStudentManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentManagementServer will
// result in compilation errors.
type UnsafeStudentManagementServer interface {
	mustEmbedUnimplementedStudentManagementServer()
}

func RegisterStudentManagementServer(s grpc.ServiceRegistrar, srv StudentManagementServer) {
	s.RegisterService(&StudentManagement_ServiceDesc, srv)
}

func _StudentManagement_CreateNewStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServer).CreateNewStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentmanagement.StudentManagement/CreateNewStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServer).CreateNewStudent(ctx, req.(*NewStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentManagement_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentmanagement.StudentManagement/GetStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServer).GetStudents(ctx, req.(*GetStudentsParams))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentManagement_ServiceDesc is the grpc.ServiceDesc for StudentManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "studentmanagement.StudentManagement",
	HandlerType: (*StudentManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewStudent",
			Handler:    _StudentManagement_CreateNewStudent_Handler,
		},
		{
			MethodName: "GetStudents",
			Handler:    _StudentManagement_GetStudents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studentmanagement/studentmanagement.proto",
}
